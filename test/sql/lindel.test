# name: test/sql/lindel.test
# description: test lindel extension
# group: [lindel]

# Before we load the extension, this will fail
statement error
SELECT hilbert_encode([1, 2, 3]::tinyint[3]);
----
Catalog Error: Scalar Function with name hilbert_encode does not exist!

# Require statement will ensure this test is run with this extension loaded
require lindel

# Confirm the extension works
query I
SELECT hilbert_encode([1, 2, 3]::tinyint[3]);
----
22

query I
SELECT morton_encode([1, 2, 3]::tinyint[3]);
----
29

query I
select hilbert_decode(22::uinteger, 3, false, false)
----
[1, 2, 3]

query IIIIII
with elements as (
  select * as id from range(5)
)
select
  a.id as a,
  b.id as b,
  hilbert_encode([a.id, b.id]::tinyint[2]) as hilbert,
  morton_encode([a.id, b.id]::tinyint[2]) as morton,
  hilbert_decode(hilbert_encode([a.id, b.id]::tinyint[2]), 2, false, false) as hilbert_decoded,
  morton_decode(morton_encode([a.id, b.id]::tinyint[2]), 2, false, false) as morton_decoded,
  from
elements as a cross join elements as b order by a, b;
----
0	0	0	0	[0, 0]	[0, 0]
0	1	3	1	[0, 1]	[0, 1]
0	2	4	4	[0, 2]	[0, 2]
0	3	5	5	[0, 3]	[0, 3]
0	4	58	16	[0, 4]	[0, 4]
1	0	1	2	[1, 0]	[1, 0]
1	1	2	3	[1, 1]	[1, 1]
1	2	7	6	[1, 2]	[1, 2]
1	3	6	7	[1, 3]	[1, 3]
1	4	57	18	[1, 4]	[1, 4]
2	0	14	8	[2, 0]	[2, 0]
2	1	13	9	[2, 1]	[2, 1]
2	2	8	12	[2, 2]	[2, 2]
2	3	9	13	[2, 3]	[2, 3]
2	4	54	24	[2, 4]	[2, 4]
3	0	15	10	[3, 0]	[3, 0]
3	1	12	11	[3, 1]	[3, 1]
3	2	11	14	[3, 2]	[3, 2]
3	3	10	15	[3, 3]	[3, 3]
3	4	53	26	[3, 4]	[3, 4]
4	0	16	32	[4, 0]	[4, 0]
4	1	17	33	[4, 1]	[4, 1]
4	2	30	36	[4, 2]	[4, 2]
4	3	31	37	[4, 3]	[4, 3]
4	4	32	48	[4, 4]	[4, 4]


# Try to encode as integers.

query IIIIII
with elements as (
  select * as id from range(5)
)
select
  a.id as a,
  b.id as b,
  hilbert_encode([a.id, b.id]::int[2]) as hilbert,
  morton_encode([a.id, b.id]::int[2]) as morton,
  hilbert_decode(hilbert_encode([a.id, b.id]::int[2]), 2, false, false) as hilbert_decoded,
  morton_decode(morton_encode([a.id, b.id]::int[2]), 2, false, false) as morton_decoded,
  from
elements as a cross join elements as b order by a, b;
----
0	0	0	0	[0, 0]	[0, 0]
0	1	3	1	[0, 1]	[0, 1]
0	2	4	4	[0, 2]	[0, 2]
0	3	5	5	[0, 3]	[0, 3]
0	4	58	16	[0, 4]	[0, 4]
1	0	1	2	[1, 0]	[1, 0]
1	1	2	3	[1, 1]	[1, 1]
1	2	7	6	[1, 2]	[1, 2]
1	3	6	7	[1, 3]	[1, 3]
1	4	57	18	[1, 4]	[1, 4]
2	0	14	8	[2, 0]	[2, 0]
2	1	13	9	[2, 1]	[2, 1]
2	2	8	12	[2, 2]	[2, 2]
2	3	9	13	[2, 3]	[2, 3]
2	4	54	24	[2, 4]	[2, 4]
3	0	15	10	[3, 0]	[3, 0]
3	1	12	11	[3, 1]	[3, 1]
3	2	11	14	[3, 2]	[3, 2]
3	3	10	15	[3, 3]	[3, 3]
3	4	53	26	[3, 4]	[3, 4]
4	0	16	32	[4, 0]	[4, 0]
4	1	17	33	[4, 1]	[4, 1]
4	2	30	36	[4, 2]	[4, 2]
4	3	31	37	[4, 3]	[4, 3]
4	4	32	48	[4, 4]	[4, 4]